# http://learnxinyminutes.com/docs/julia/
# Computational Techniques of the Simplex Method. Kluwer Academic Publishers, Boston, 2003. ISBN 1-4020-7332-1. IstvÃ¡n Maros.

#= 
	Solve, Revised, Simplex. lp_solve_rsimplex
	1. revised simplex, basis inversion, no reuse
	2. revised simplex, basis factorization, no reuse
	3. revised simplex, basis factorization, reuse, no re-factorization
	4. revised simplex, basis factorization, reuse, re-factorization
	5. revised simplex, basis factorization, reuse, re-factorization, degen, sing
	
	Solve, Revised, Sparse. solve_srsimplex
	1. revised sparse simplex

	Presolve
	1. ??
=#

module lp

	type canonical_problem
		numtype::String
		n::Int
		m::Int
		c#::Array{Any, 1}
		A#::Array{Any, 2}
		b#::Array{Any, 1}

		canonical_problem() = new()
	end

	function conv_vec(numtype, V)
		n = length(V)
		ret = eval(parse( "Array($numtype, $n)" ))
		for i = 1:n 
			ret[i] = eval(parse("convert($(numtype), $V[$i])"))
		end
		return ret
	end

	function conv_mat(numtype, M)
		r = size(M)[1]; c = size(M)[2];
		ret = eval(parse( "Array($numtype, ($r, $c))" ))
		for i = 1:length(M)
			ret[i] = eval(parse("convert($(numtype), $M[$i])"))
		end
		return ret
	end

	function create_problem(numtype, c, A, b)
		ret = canonical_problem()
		ret.numtype = numtype
		ret.n = length(c)
		ret.m = length(b)
		ret.c = conv_vec(numtype, c)
		ret.A = conv_mat(numtype, A)
		ret.b = conv_vec(numtype, b)
		return ret
	end

end


module lp_rsimplex_algo1
	using lp

	type working_data
		prob::lp.canonical_problem
		n::Int
		m::Int
		iB::Array{Int, 1}
		iR::Array{Int, 1}
		B#::Array{numtype, 2}
		Binv#::Array{numtype, 2}
		R#::Array{numtype, 2}
		xB#::Array{numtype, 1}


		working_data() = new()
	end

	function create_data(prob)
		ret = working_data()
		ret.prob = prob
		ret.n = prob.n 
		ret.m = prob.m
		ret.iB = Array(Int, prob.m)
		ret.iR = Array(Int, prob.n)
		numtype = prob.numtype; n = prob.n; m = prob.m;
		ret.B = eval(parse( "Array($numtype, ($m,$m))" ))
		ret.Binv = eval(parse( "Array($numtype, ($m,$m))" ))
		ret.R = eval(parse( "Array($numtype, ($m,$n))" ))
		ret.xB = eval(parse( "Array($numtype, $m)" ))
		return ret
	end	

	function sel_cols(S, T, iC)
		for c = 1:length(iC)
			cc = iC[c]
			for r = 1:size(S)[1]
				T[r, c] = S[r, cc]
			end	
		end
		return T
		# T = S[1:size(S)[1], iT] (nice, but will allocate memory)
	end

	function split_cols(S, T1, T2, iT1)
		i1 = 1; Tc1 = 1; Tc2 = 1;
		for c = 1:size(S)[2]
			if length(iT1) >= i1 && c == iT1[i1]
				T = T1; Tc = Tc1; Tc1 = Tc1+1; i1 = i1 + 1;
			else
				T = T2; Tc = Tc2; Tc2 = Tc2+1; 
			end
			for r = 1:size(S)[1]
				T[r, Tc] = S[r, c]
			end	
		end
	end

	function set_basis_logical(data)
		data.iB = [i for i in n+1:n+m]
		data.iR = [i for i in 1:n]
	end

	function solve(problem)
		data = create_data(problem)
		set_basis_logical(data)
		split_cols(data.prob.A, data.B, data.R, data.iB)
		return data
	end

end

function test()
	problem = lp.canonical_problem("Float32")
	problem.n = 2; problem.m = 1;
	problem.c = [1, 1]
	problem.A = [[2, 3]]
	problem.b = 10

	sol = lp_rsimplex_algo1.solve(problem)
	println(sol)
end
