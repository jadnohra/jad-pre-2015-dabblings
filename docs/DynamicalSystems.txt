Bullet vs. ODE, opinions.
	http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=9&t=5033&p=18398l
	http://code.google.com/p/bullet/issues/detail?id=152
	http://code.google.com/p/bullet/issues/detail?id=33
	http://bulletphysics.org/Bullet/phpBB3/viewtopic.php?t=9496

Motor control (except for zero velocity) should not happen within solver
	http://books.google.de/books?id=MnOOnHJwVVQC&pg=PA202&lpg=PA202&dq=robotic+arm+servo+control+theory	


Rb becomes point mass for one frame, masa determined by orient/vel/inert-tensor

----------- 

Research pt: is perturb resp for limit misbehav? What are the ther. Effects. Can we warm up unperturbed with perturbed?

----------- Solver mixing
* Can we not use 'static' forces when mixing solvers (ignore the Painleve paradox, or fix by perturbation?), that is, in one frame (substep), for one run of a direct solver, then one run of the iterative solver, resolve the whole direct solver constraint system affected, and not just the direct body affected, by doing force calculations, that do not need a time intervale (no impulse), warm starting from the direct solver results. 
Can this be a method? using a perturbed direct solver to bypass the painleve paradox.
A search provides the not directly related, but possibly useful for Painleve paradox intuition article:Investigation of Painlev√©'s paradox and dynamic jamming during mechanism sliding motion (http://tx.technion.ac.il/~izi/publications/Painleve_paper_RCD2014.pdf)

-----------

Next for hkds is crane, or vehicles (KMW). For LCP: interior methods.

-----------

http://www.fsiforum.cz/upload/soubory/databaze-predmetu/RME/49280122570502.pdf

http://www.chemecomp.com/MWR/

My rule when I'm reviewing papers, or teaching students, is that you first have to solve problems whose solution you know. Of course, those will be simpler than the one you want to solve. So, when you solve the more complicated one, you must solve it on at least three meshes, each more dense than the one before, to show that the key results do not change significantly (define significant!) from mesh to mesh. Otherwise you are looking at a combination of solution and error, and don't know which. This is the philosophy I use in my book, Intro.to Chemical Engineering Computing, Wiley, 2012. See www.ChemEComp.com. Of course, if you can compute error bounds you know, but that is usually only possible for simple problems. I treat that, too, at www.ChemEComp.com/MWR. 

---------


http://edulibs.org/conjugate-gradient-solver-c-code/
http://edulibs.org/get_paper.php?id=3178656

---------

http://www.mcs.anl.gov/petsc/

---------

Parallel mlcp system, except for dyn/dyn contacts (revalc systems iter), and other explicit rules

---------

Make all masses equal, run 1 iter, partition on weak interactions to mlcp systems!!!!???? 
Or similar. Test converg, or run parallel 1-iter-random order, etc?? Find 'easy points'

Since we are gather ctraints! Partition into systems when indep!!!. For the rest, optimize with sparsity?!

--------

Hybrid: pbd ragdoll! 
pdb hybrid in general! after auto-analysis to see where it applies...

http://i31www.ira.uka.de/~jbender/Papers/CASA2014.pdf

-------

Do not forget shake.

In Silico Single-Molecule Manipulation of DNA with Rigid
Body Dynamics

http://www.ploscompbiol.org/article/fetchObject.action?uri=info%3Adoi%2F10.1371%2Fjournal.pcbi.1003456&representation=PDF

References the Shake algorithm, which seems to be exactly: use the jacobian directions from the future unconstrained frames, luckily with analysis:

http://www.isds.duke.edu/~scs/Courses/Stat376/Papers/Constraints/Shake1977.pdf

Numerical integration of the Cartesian Equations of Motion of a System with Constraints: Molecular Dynamics of n-Alkanes

It is time to reorganize our online/offline notes on all of this.

A product?!?!?!

----------

The jacobian must be solved for as well!?!?!?!?


---------

http://siconos.gforge.inria.fr/

-------

Add the spider, strandbeast, etc. from this: http://www.graphics.rwth-aachen.de/media/papers/cr_paper1263.pdf

-------
Calculate time step+ solver mixing depending on scene! Body sizes, vels, etc etc (difficult: discret error, etc.) 

-------
ODE: motor+limit uses a hack, but the problem should actually be solvable, is the issue a singularity like the one discussed in: 'A Numerically Robust LCP Solver for Simulating Articulated Rigid Bodies in Contact'?
(Probably the pivot choice is a problem due to almost parallel lines, implement a fix. Also why are the lines not exact parall?)

* Implement valve-control limits (similar to the KMW digger), which are actually more stable numerically.

-------
ODE issues and robotics
 - http://robotics.cs.tamu.edu/dshell/papers/simpar2010ode.pdf
 - http://autsys.aalto.fi/en/attach/SpacePartner/Heiskanen_Development_2008.pdf
 - google: robotic simulator ode physics library problems

------
 * Remember note about 'arch/mech' content creation/consulting


----- More CM
 - http://www8.cs.umu.se/education/examina/Rapporter/SeuglingRolin.pdf (http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?f=4&t=755&sid=136da7d4fce69ef487a37faf4393f2be)
 - http://comments.gmane.org/gmane.comp.lib.ode/16681
 - http://scholar.google.com/scholar?q=class+of+asynchronous+parallel+multi+splitting+relaxation+methods+for+the+large+sparse+linear+complementarity+problems&hl=en&as_sdt=0&as_vis=1&oi=scholart&sa=X&ei=yyQ7U8CuCoWYtQaC8IFA&ved=0CCoQgQMwAA
 - http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.366&rep=rep1&type=pdf

------ make dis an integral part of hkds. Including 'contact sphere' and 'external impulse' emulation.
	- rendering and prediction analysis of dis data: dis: https://github.com/mbostock/d3/wiki
	- http://www.revolutionanalytics.com/r-language-resources
	- Crucial: positional configurator, stability max per constr, apply pt impulses (contact pert), self contact pert.
	- Some of dis virtual classes should be in dsl scripts.
	- The measure of stability will have to be ad-hok, number + inf mean unstable? Instead of variance use linear approx of local maxima pts.
	- Types of predicted 'stable behavior'
	- add num. Stabil analysis: stable, asympt stable, by doing perturbations!!! Important. (see ITPA)
	- note: bias acts as the small excitations in oscillators!


------- history of modellica (and dae)	
	- https://cw.felk.cvut.cz/wiki/_media/courses/a6m33mos/tiller_introductiontophysicalmodelingwithmodelica.pdf
	- https://modelica.org/events/modelica2006/Proceedings/sessions/Session2d2.pdf
	- http://www.maplesoft.com/documentation_center/online_manuals/modelica/Modelica_Mechanics_MultiBody_Parts.html
	- http://books.google.de/books/about/Fractional_Analysis.html?id=zGSsizXTvKQC&redir_esc=y
	- http://www.cds.caltech.edu/archive/help/uploads/wiki/files/12/Lecture3and4.pdf
	- Modeling of MBS using relative variables often much faster: capable of real-time simulation of complex models
	- http://www.bausch-gall.de/Tutorial8_Multibody_Heckmann.pdf
	- https://openmodelica.org/svn/OpenModelica/trunk/SimulationRuntime/cpp/Solver/
	- https://openmodelica.org
	- https://modelica.org/events/workshop2000/proceedings/Schiela.pdf
	- https://cw.felk.cvut.cz/wiki/_media/courses/a6m33mos/whitepaper-designofhybridmodelica.pdf
	- https://www.google.com/search?q=modelica+imixed&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=fflb

------ Medical

	- http://caehealthcare.com/eng/surgical-simulators/endovr
	- https://www.google.com/search?q=surgery+simulation+market&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=sb
	- http://www.kmimediagroup.com/military-medical-veterans-affairs-forum/articles/187-military-medical-veterans-affairs-forum/mmt-2009-volume-13-issue-4/1759-medical-training-20-sp-300
	- http://metropolis.scienze.univr.it/xron/
	- http://www.slideshare.net/rheinl271/medical-simulation-industry-overview-technet-2012
	- http://blenderartists.org/forum/archive/index.php/t-301095.html
	- http://www.carolinashealthcare.org/laparascopic-box-trainers-simulation-equipment


------- LCP research
* An efficient automatic alt. to perturb/lexi for factorization implementations.
* Symbolico-numerical algo.
* Fix Judice's erratum.
* We know a lot more about possible sources of singularity, we can maybe even remove these sources and/or prioritize them. This will make the algorithms approach iterative robustness.
* Is it possible to create a simple specific cycle trap given our extra knowledge about the system?
* Can perturbation also be used to handle singulariy in syst-of-eq solving? Think of parallel lines that are perturbed.
* Solve limits with cpa, then motors with ppcd2 or some sign (for limits) preserving algo
* 'Warm start' : knowing the basis try to reach that first with min pivots?
	- note my hybrid 'accel direct, warm start it' is actually (a bit remtly) related to pgs+subspace min, active set warm start in a sense, but using gs instead of prev iter. Note that! we could accel using last iter by trying to just use same active set!
* Cant we presolve and solve in parallel??
* http://link.springer.com/chapter/10.1007/BFb0120781  (Robust implementation of Lemke's method for the linear complementarity problem)
 ( found publically at http://www.thetomlins.org/John/robust_lemke.pdf)
* Stability of the linear complementarity problem at a solution point (HA Cu Duong)
* - Check this statement 'In double precision, a direct solver can easily handle condition numbers of 10^12 at least, according to numerical  analysis)'
* <toolkit> PGS + subspace minimization iterations (An Algorithm for the Approximate and Fast Solution of Linear Complementarity Problems)
* <toolkit> PGS + precondition (Schur complement) (from cables, Rigid Body Cable for Virtual Environments)
* <toolkit> Conjugate Gradient 
* <toolkit> (parallel?) Krylov subspaces: (Using Krylov Subspace and Spectral Methods for Solving
Complementarity Problems in Many-Body Contact Dynamics Simulation)
* <toolkit> Projected Gradient LCP: R. Andreani, J. J. J√∫dice, J. M. Mart√≠nez and J. Patr√≠cio, A projected-gradient interior-point algorithm for complementarity problems
	- Matrix market! http://math.nist.gov/MatrixMarket/, http://www.netlib.org/
* <toolkit> LCP+matrix splitting (On Iterative Solution for Linear Complementarity Problem with an $H_{+}$-Matrix, A. Hadjidimos)
* silly/old? the class/canonical form of rbs mlcp matrices.
* <toolkit> (Demmel, A supernodal approach to sparse partial pivoting) (SuperLu). This can accelerate LU factorization when used inside LCP.
* Better to 'choose at random' instead of broken perturb, since we have a fallback.


-------- LCP research*
* S. M. Robinson, Generalized equations and their solutions, Part I: Basic theory, Mathematical rogramming Study 10 (1979) 128‚Äì141.
* S. M. Robinson, Some continuity properties of polyhedral multifunctions, Mathematical Programming Study 14 (1981) 206‚Äì214.
* Huynh The Phung, A Geometrical Approach to the Linear Complementarity Problem
* Observations on a class of nasty linear complementarity problems
* http://researchindex.net/author/Ferris,_M.C./536ff9cf26184448c512789a

----- LCP in several open source dynamics packages
 - http://www.gams.com/dd/docs/solvers/path.pdf
 - http://www.gams.com
 - http://www.opentissue.org/svn/OpenTissue/archieve/grid3d/unsupported/OpenTissue/math/lcp/
 - https://code.google.com/p/rpi-matlab-simulator/

------- LCP Trivialities
 * Of course we can warm start pvt methods!

------- System Parade
* Fixed join chandelier (like the ones at the 'Stabi')

------- Misc
* Dsl a product!
* Find stud. For mini mobile? Game: the machines.
* Undercut algx prices.
* WOF keyboard mapper!!! (KMW ...)
* pyHavok!
* Phys revealer: inert, damp,max,...
* Hvk: usable vehicle ai, at last!
* Proving the rigidity of simd is an exercise in formal logic!
	http://pages.cs.wisc.edu/~venkatra/papers/pact13-dyser.pdf
* vip perf tool: how much utiliz (babdwidth, aruthm, etc,) is left!?!	

------- Delegate
* Multi-threading accums
* Multi-threading logging
* Transparent Hvk mem hook, consistent mem mgmt
* Structure tweak&bake
* clearTypeFromReal
* Stat trace (performant)
* Blocking: more performant iteration over blocks
* Integrate 'live connect' into havok
* Bucket contact manifold
* Hkds block viewer
* Clean:
	- hkdsSolver.h, this not a 'solver'
	- don't split files when it is not needed
	- don't use serial, use embedded json, config per group, global config, etc.
		- also very important: mlcp as plug, so that having a toolkit, including optimized versions makes no difference.
		- non-opt versions should not be bothered by opt ones
	- keep hkp, hknp, support transparent and more
	- keep self-containment, eg: blocks, etc.
	- keep math style, the main ver is not for experiments, a copy can be.
	- Remove asserts, use paranoia and arg. (HK_WARN_ONCE_ON_DEBUG_IF) (isMlcpNumeric)
	- Remove HK_TIME_CODE_BLOCK's use perf monitor mode
	- hkReal currStep, hkReal microStepBatch are integers! remove sctx.substep'Scale'.
	- Revert isMlcpNumeric instead of meaningless'isOK':
	- mprog::Number
	- hkds live multiplaform,multithread (sockets, etc.) 
		- cleanup PUBLIC/INTERNAL for use in demos
		- using tls, and also using tcp socket for trace
	- build system variants of hkdsCompileConfig
	- optimize ghost for almost free performance: dirty flag update once per frame.
		- hkds frame callback
	- rip out: void hkMonitorStream::TimerCommand::setTime(), rip out  HK_TIMER_BEGIN... (use non macro code)
		then make a nicer stats / live interface, while also keeping hkMonitorSteam supported with a config arg
	- remove the added 'int numMlcp;'
	- mlcp database in hkds python script
	- dis and contacts, dis and solver mixing
	- Hkdis!!! Positional perturbation!
	- undo the filter_caching in solver.cpp, or at least fix it such that we can also run without, to change the order of solvers for testing.
	- Tls for internal memory caching, no external setting!
	- Remove MlcpMatrix, MotionInfo, PairLinAng, etc. from 'types' header
	- hkSolverConstraintBlock back to hkds
	- hkpLimitAccelVelMotorControl back to hkds
	- move trace, etc. to tools. not project specific? or keep copies and keep tool?
	- go over all cls of 'RbNew' and pick the rests.
	- free non-copy conv by template speci.
	- Fix Peter's tau implementation, implement just as in SolverFunction.hxx
	- Local filters for trace, otherwise we will swamp, test with multiple iters, support them better. (hash filter)
	- Implement shift results pointer! it is used in NpDynSys1Demo: prismatic!
	- m_inverseInertiaLocal.setZero() breaks, creates full zero rows in Mlcp matrix, handle this! (see NpDynSys1Demo: prismatic and m_inverseInertiaLocal.setZero())

* Hkds force readout + robot muscle demo
* group demo + group merge demo + live perf, etc.
* Hkds float/double arg. : cfg.dbl in double builds gives: cfg.real:native,float,double


------- Hkds
* explain the open, non-baking approach in a specific 'software philosophy' document: no bake motor in, no bake settings in, 
	no bake algo in.
* sor friction, also, better penetration recovery: contacts in complicated heightfield
* Hkds implement the rationals: it is very different if we round numbers at end of op. Vs. At end of frame / algo!!!
	 - Isnt it mostly about mem mgt?!?!
* P4,hkds lab
* Prel. test: python rationals on non-baby-sitted model!
* Robotic arm soft contact screw or pull manipulator
	- also relate to recovery of wrong initial configuration (Peter's motor tau).
* algo steps: e.g: solve group1 (system+normal contact), then feed into group2-iter: (system+normal contact+friction)
* better control over 'rhs' neccessitates split impulse and/or projection. enabling it by default causes undesirable oscillations (e.g: drop a lh944 with this enabled for ang motor!)
	- for now this is remedied with a hold-pos motor controller.
* Dis extension into 'oscillation testing': how fast do we stop oscillating and go to a stable state, including hybrid setups:
	- see the need for enabling rhs for the lh944!!!
	- more precise control over stabilization bias (now disabled for ang motors, but enabled for other things...), until we use proj/split.
		- for now this is remedied with a hold-pos motor controller.
* Fwd: Hkds does 2d natively: motorbike vehicle testbed	
* Control systems (e.g motor control), on a system level, that is, like industrial ones that 'know more' about a system.
* Mlcp recipe to generalize
* dis:
	- Hkdis into tool: sotftness, wobliness, explosiveness, performance (mlcp), scaling, weak points
* dis:
	hkds: dis: tune: psor err, iters, mlcp, etc for a vehicle
	With such a tool, it can become possible to choose psor settings properly and bypass the need for mlcp except when needed.
	The tool should have two obvious knobs: performance, fidelity.
* dis:
	google: https://www.google.de/search?client=safari&rls=en&q=automated+floating+point+analysis&ie=UTF-8&oe=UTF-8&gfe_rd=cr&ei=8BhpVJuGE8qI8Qeo-IGADw#q=automated+floating+point+analysis&rls=en&start=10	
* hkds: Add recipe, add config strings, and internal algo based config structs, shlex parse. multi-level recipes can enable/disable constraint types for direct warmup of system with contacts.
* Turn generic control into a control tool, or at least config.
* hkds team: vehicle builder
* Hkds: pseudo plastic method, Hkds: force field perturbation method.
* Hkds: path to automatic: reverse direct and iter! Move to systems ctraints that are not converging and connected. Also: solution quality as a basic metric, generalize the level concept.
* Hkds: 'Write things down' week(s).
* Hkds: And/or precondit into toolkit, more flexi-recipe.
* If numer instabil -> limit break -> bias -> jitter then: calc-err and iter smooth while smoothing is error reducing. Again: flexible recipe.
* Add hkds note or imp: error bias suck and/or reset. This does not work since some bias is needed: e.g: for unilaterals (limits), etc. The better way needs more intrusiveness, during setup and/or hkds-constraints.
* hkds: the specificity philosophy. e.g we know tat least some lin dep sources, use that while if xourse also handle general case. simil: out of mlcp we know it is mot limit: can we do sthg with this info? maybe also in gen about limits. does this relate directly to compliance and bias research?
* hkds: iterative incremental auto-block?
* hkds: should it not be possible to calculate the needed number of iterations needed for psor given the nice symmetric structure and the other properties.
* hkds: sound bar rendering (https://soundcloud.com/rodemics/voice-over-2-ntg2-wav?in=rodemics/sets/ntg2)
* dis: extra trace monitor
* write fdb server??
* spider arena: ui, random weights, compare, fight? with sound!
* http://www.cs.rpi.edu/~trink/sim_packages.html
* also integ rbsysjson
* hkds: one-pager
	http://sfb649.wiwi.hu-berlin.de/fedc_homepage/xplore/ebooks/html/csa/node38.html
* Coop oktal.fr, http://www.maxsoft-india.com/SimWise.aspx, http://www.experts.renault.com/kemeny/projects/ivima/index.html, http://www.katron.com.tr/index.html
* We must pre-process the limits and motors eventually, for performance and solvability. Do it properly, by analyzing the resulting mlcp rows related to the mot/lim constraint.
* Particle based geometrical impossibility detector


------- Hardware Pad control
* Devices:
	- http://www.thomann.de/at/cat.html?gf=daw_controller&oa=pra
	- http://www.akaipro.com/category/pad-controllers
	- http://www.behringer.com/EN/Category/Computer-Audio.aspx?s=N2003
	- http://www.bhphotovideo.com/c/product/638094-REG/Akai_LPD8_LPD8_USB_MIDI.html/prm/alsVwDtl

------ Information management
* at Nasa: http://www.sciencedirect.com/science/article/pii/0740624X9090051O

------- Commercial
* sell nds, also put it into the hkds agenda
* hkds: beat eric+ggl's project, make them buy our stuff
* hkds: the forward looking robotics toolkit, what about hydrocopters etc?
* hkds: simulate athg
* hkds: compliance: http://www.magicalrobot.org/BeingHuman/vytas-sunspirals-publications
* hkds: kiss perturbationless mlcp by config hashing.
* hkds: http://www.simscale.com/_en/index.php?page=library

------- nds
 * use julia prog lang? (http://julialang.org/)
 	- Dis: write dis1 in julia lang! http://julia.readthedocs.org/en/latest/manual/complex-and-rational-numbers/
 * Add this to the issue example list: (COM-2811, fp precision)
	 Hey Oliver, the repro is in the issue:
			hkVector4f vec;
			vec.set( 0.0f, 0.0f, 0.000000000000000000111021597f, 0.982303559f );
			hkSimdFloat32 vecLength = vec.length <3, hkMathAccuracyMode::HK_ACC_MID, hkMathNegSqrtMode::HK_SQRT_SET_ZERO>(); // vec.length3()
			HK_ASSERT2( 0x6173b782, vecLength < 1000000.0f, "translation is unexpectedly large" );
		Built on vs2012, noSimd, Debug. vecLength will be NaN.

		Not sure who this should be directed to but just looking for some input on COM-2811 , ‚ÄúhkVector4f::length3() returns NaN for fpu math types and not full accuracy‚Äù. This is in noSIMD, VS2012 or higher.

		Details in the issue but basically a vector with small but not denormal length, calling vec.length3() calls vec.length<3, hkMathAccuracyMode::HK_ACC_MID, hkMathNegSqrtMode::HK_SQRT_SET_ZERO>. This checks for zero length (which it isn‚Äôt), then performs an approximate sqrt, which produces a NaN. This NaN gets returned back to the caller which is obviously wrong since they asked for HK_SQRT_SET_ZERO.
 * Rename nds to nam? nac? numerical analysis machine/calculator.		
     

------- Analytical dynamics
* Best coord sys for the job?
* Pos ctraints are garbage, (Damp grave corrections? nah)


------- Differential Equations Research
* Yes they do exist, the exponentially convergent algorithms (trio: Ivan Gavrilyuk, Volodymyr Makarov, Vitalii Vasylyk):
	- (An Exponentially Convergent Algorithm For Nonlinear Differential Equations In Banach Spaces) http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.2552
	- (Exponentially Convergent Algorithms for Abstract Differential Equations)

------- Integration.
* "An Angular Momentum and Energy Conserving Lie-Group Integration Scheme for Rigid Body Rotational Dynamics Originating from St√∂rmer-Verlet Algorithm"
* 

------- Sig
* Take max func yi=max(yk, 0<k<i). Which is monotone. Then find best poly growth func: x^g.
	Find g by bin search. If x < 1 then converging!!!
	Do same with min func.
* Links:
	- http://office.microsoft.com/en-gb/help/choosing-the-best-trendline-for-your-data-HP005262321.aspx
	- http://www.alglib.net/interpolation/leastsquares.php#header4
	- https://tamino.wordpress.com/2014/01/01/
	- http://en.wikipedia.org/wiki/Gompertz_function
	- http://oklo.org/category/systemic-faq/page/3/
	- http://oklo.org/systemic-console-tutorial-3-gl-876/
	- not much found on 'variable frequency curve fitting'
	- damped sine curve fitting
		- http://www.nlreg.com/
		- http://stackoverflow.com/questions/16110185/how-to-fit-a-curve-to-a-damped-sine-wave-in-matlab
		- http://fortrancalculus.info/apps/curvfit.html
	- http://ab-initio.mit.edu/wiki/index.php/Harminv


------ Dsl
* The proper language! Do not fix structure, piping is semantic, functional piping.

------ Dynamical Systems Research
* http://www.inrialpes.fr/bipop/people/brogliato/brogli.html

------ Game Physics
* hkds for game phys: blackbox system control 'theory'
* why not hvk destr?https://bisimulations.com/vbs3/technology
* integ to np: kinetic version of all constraints.
* work out: approximate, diagonally dominant, fast convergent, ???, rb dynamics.

------- Roadmap / KMW
* Solve lin-sys separatly! and faster!
* must be able to solve lh944 unadapted, without perturb.
* Hkds learning mode for common probs!
* The khds 6dof will have procedural ang lim support + conjunction/combination thereof
* handle precision cycling problems! (currently by using dbl and maxit) (see data5/fail_5076_requires_dbl.txt)
	- Implement Robust Lemke, test it on our failure case.
	- Check this statement 'In double precision, a direct solver can easily handle condition numbers of 10^12 at least, according to numerical  analysis)
* Fix pertrub algo: not pert+=1, but per*=2 or per/=2, to make sure too big or too small numbers still get pertrubed apart! or add failsafe fail. (eq_count not decreasing!).
* For contact friction, (Numerical methods for nonsmooth mechanical systems, Lecture 3) is a very good reference.	
* hkds: degenerate hints, lin eq and also lcp. Very imp for independ of iter solv
* better control of exporting within solver mixing (especiall hkp)
* Hkds: soft grip as compliance test
* Solver mixing test: mr skinny legs
* Important! Why does spinning the differ with the mouse increase dramatically mlcp err. Is it the condition number? or q? or?
* Fallback: warm start? Nope, when the direct solver fails, we have a reason to distrust its last solution.
* Hybrid monster, minimizing bandwidth, allowing time based quality.
* Use schema goto wiring for more hkds indepence?
* Redo the math of all bias in all constraints
* Free direct solver from tau/damp coupling.
* Fallback: pgs toolkit
* Hkds: specific: hydraulic adapter + force recalc
* Find out why on demo level, we need to divide by number of microsteps to get the applied impulse (on demo level)!
* list1
	- Hkds: imp pgs parallel + fallback! + conv. Setting.
	- Mechanical neighbor matrix? Modif inertias, recover forcres using bias?
	- Hkds: call it block solving! With specif. Algo choice
	- Hkds: block scheduling. Also check theory!
	- Contact force squash (soft)
	- Hkds: digger vs giant breakable ragdoll.
	- Include squash in dig&rag demo
	- Hkds: break and squash alt. : wof limbo!
	- Hkds: perma squash, or split impls.
	- Hkds: heightfield perma squash
	- hkds: bagger, that's the biggest: http://www.takraf.com/en/Products/Mining_Equipments/bucketwheelexcavator.htm
	- bagger: http://facta.junis.ni.ac.rs/walep/walep2004/walep2004-13.pdf
	- hkds: ForgeFX
	- hkds: http://www.catsimulators.com/simulators/
	- excavator 'shows'
		- hkds: exc. show: https://www.youtube.com/watch?v=Je9FEuzVn_k
		- https://www.youtube.com/watch?v=5nUXL3GOFn0
		- https://www.youtube.com/watch?v=nSobKUwt5nU
		- https://www.youtube.com/watch?v=QatxJuKD8yc
		- https://www.youtube.com/watch?v=CeIlPanfbvs
		- https://www.youtube.com/watch?v=5Uy1T_jbM94
		- https://www.youtube.com/watch?v=wn_wif-NorU
		- https://www.youtube.com/watch?v=tf7W7Mruums
	- excavator tipping
		- http://www.swri.org/4org/d07/learning/immersive/equipop.htm
		- https://www.youtube.com/watch?v=KCRHVe0HHMU
		- https://www.youtube.com/watch?v=g1mB93XBnZ4
		- https://www.youtube.com/watch?v=l6sWeluSf2U
		- http://www.iaarc.org/publications/fulltext/Static_compensation_ZMP_algorithm_preventing_tips-over_of_a_tele-operation_excavator.pdf
	- crane tipping
		- https://smartech.gatech.edu/bitstream/handle/1853/37162/fujioka_daichi_201012_mast.pdf
	- excacator counterweight
		- http://www.bllc.net/HardHatSamples/Excavator_Instructors_Notes.pdf
		- http://www.iinte.edu.pl/pdf/200907s58.pdf	
* 400 vehicles:
	- milsim: integr. kinematic mode

------ Commercial solvers
* solvers: http://ampl.com/products/solvers/

------ Piece of Mathematics weeks.
	- Hkds: add to report: fallacy (misconception, partial truth) of 'mass ratio' see off axis, rotation, eyc.		
	- exercise!!! derive 'rigid segment dynamics' pos:3d, rot:2d!

------- Employment
	- List of intership projs, like dlr.

------ Present
	- One culprit is the pernicious laptop, it should be outlawed! It encourages the speaker to pass the cognitive speed-limit by orders of magnitude. Sure enough, the best invited talk was Michael Kiessling's talk that used the ancient technology of overhead projector, and it would have been even better if he only used the blackboard, and it would have been better still if he didn't use anything, just told us a story.	

	- Finally, there is an issue for which architecture is entirely the wrong metaphor, and Colum- bus‚Äô departure from the Mediterranean is much more appropriate. Los Reyes Catolicos certainly did not promote free intellectual exploration in their domestic and colonial policy, but they did at least fund a ‚Äúblue sea‚Äù project.

	Nowadays, one is asked to give advance notice of all of the theorems that one intends to prove. Such planning may be possible when building a house, but it can be done if and only if there are no original ideas. A mathematician with a plan for a theorem wants to carry it out straight away, and the only pieces of equipment that are needed are a clear head and a clear blackboard. We don‚Äôt put our lives at stake as Columbus did when we embark on scientific experiments or try to prove mathematical theorems, but if there is no intellectual risk of failure in a proposed piece of research, then it is redundant, and probably not worthy of funding.

	We like to think that the finished product of mathematics is the most precise of any branch of science or engineering. The corollary of this is that the vision of a mathematical project in advance of its detailed plan is necessarily much mo

	- http://gelookahead.economist.com/disrupt-disrupted/ 	(Key Takeaways)
